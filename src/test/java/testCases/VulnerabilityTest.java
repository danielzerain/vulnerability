package testCases;

import factoryRequest.ApiRequest;
import factoryRequest.FactoryRequest;
import factoryRequest.RequestInformation;
import factoryRequest.ResponseInformation;
import io.qameta.allure.*;
import org.json.JSONObject;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import utils.ConfigEnv;
import utils.GetProperties;
import utils.RoutesOwaspAPI;

public class VulnerabilityTest {
    private String idScanner;

    @BeforeEach
    public void before() throws Exception {
        new GetProperties().readProperties();
    }

    @Description("Seccion3 Vulnerability")
    @Link("https://todo.ly/")
    @Severity(SeverityLevel.CRITICAL)
    @Test
    public void startVulnerabilityScanner() {
        try {
            this.startScanner();
            this.monitoring();
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
        }
    }

    @AfterEach
    public void after() throws Exception {
        RequestInformation information = new RequestInformation();
        information.setUrl(RoutesOwaspAPI.GET_REPORT);
        ResponseInformation responseInformation = FactoryRequest.make(ApiRequest.GET).send(information);
        this.attachmentFile("OWASP ZAP REPORT", responseInformation.getBody());
        information.setUrl(RoutesOwaspAPI.GET_ATACK + idScanner);
        responseInformation = FactoryRequest.make(ApiRequest.GET).send(information);
        this.attachmentFile("Lista De Vulnerabilidades", responseInformation.getBody());
    }

    @Attachment(value = "{0}", type = "text/html")
    public String attachmentFile(String name, String content) {
        return content;
    }

    @Step("Inicio de  escaneo de vulnerabilidades con ZAP")
    public void startScanner() {
        try {
            RequestInformation requestInformation = new RequestInformation();
            requestInformation.setUrl(RoutesOwaspAPI.START_SCANNER + ConfigEnv.host);
            ResponseInformation responseInformation = FactoryRequest.make(ApiRequest.GET).send(requestInformation);
            JSONObject body = new JSONObject(responseInformation.getBody());
            idScanner = body.get("scan").toString();
            System.out.println("ID  de escaner de vulnerabilidades:" + idScanner);
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
        }
    }

    @Step("Monitoreo de test de vulnerabilidades - hasta completar el progreso 100%")
    public void monitoring() throws Exception {
        String percentage = "0";
        RequestInformation information = new RequestInformation();
        information.setUrl(RoutesOwaspAPI.GET_PROGRESS + idScanner);
        while (!percentage.equals("100")) {
            Thread.sleep(5000);
            ResponseInformation responseInformation = null;
            responseInformation = FactoryRequest.make(ApiRequest.GET).send(information);
            JSONObject body = new JSONObject(responseInformation.getBody());
            percentage = body.get("status").toString();
            System.out.println("Estado del test de vulnerabilidades del host" + ConfigEnv.host + "----> " + percentage+"%");
        }

    }
}
